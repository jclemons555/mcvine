# -*- Python -*-
#
# Jiao Lin <jiao.lin@gmail.com>
#

import click
from ..cli import instrument
from mcvine.cli import pyre_app, alias

cmd_prefix = "mcvine instrument arcs "

@instrument.group()
@alias("arcs", cmd_prefix)
def arcs():
    return

arcs_app = lambda name: pyre_app(parent=arcs, appname = name, cmd_prefix=cmd_prefix)

# beam sim
@arcs_app("arcs_analyze_beam")
def analyze_beam(ctx, appname):
    from .applications.BeamAnalysis import App
    return App(appname)

@arcs_app('arcs_moderator2sample')
def mod2sample(ctx, appname):
    "moderator to sample simulation"
    from .applications.Moderator2Sample import App
    return App(appname)

@arcs_app('arcs_m2s')
def m2s(ctx, appname):
    "simplified moderator to sample simulation app"
    from .applications.M2S import App
    return App(appname)

@arcs_app('arcs_beam')
def beam(ctx, appname):
    "beam simulation. include mod2sample sim and post-processing"
    from .applications.Beam import App
    return App(appname)


# detsys sim
@arcs.command(help="""convert scattereed neutrons to events (pixelID, tofChannelNo, prob)
intercepted by ARCS detector system.""")
@click.argument("neutrons", default="neutrons.dat")
@click.option("--workdir", default='work-arcs-neutrons2events')
@click.option("--nodes", default=0)
@click.option("--ncount", default=0)
@alias("arcs_neutrons2events", "%s neutrons2events" % cmd_prefix)
def neutrons2events(neutrons, workdir, nodes, ncount):
    from .applications.Neutrons2Events import run
    run(neutrons, workdir, nodes, ncount=ncount)
    return
    
@arcs.command(help="""convert events.dat (generated by neutrons2events) to nxs file""")
@click.argument("events", default="events.dat")
@click.argument("nxs", default="arcs-sim.nxs")
@click.option("--tofbinsize", default=0.1)
@click.option("--type", default="processed", type=click.Choice(['processed', 'raw']))
@click.option("--Ei", default=0., help="nominal incident energy in meV")
@alias("arcs_events2nxs", "%s events2nxs" % cmd_prefix)
def events2nxs(events, nxs, tofbinsize, type, ei):
    from .applications.Events2Nxs import run
    run(events, nxs, tofbinsize=tofbinsize, type=type, Ei=ei)
    return
    
@arcs.command(help="""convert scattereed neutrons to nexus file

Impl.: mcvine.instruments.ARCS.applications.Neutrons2Nxs
""")
@click.option("--neutrons", default="", help='path to neutron data file')
@click.option("--nxs", default="arcs-sim.nxs", help='nexus output path')
@click.option("--workdir", default='work-arcs-neutrons2nxs', help="working dir to save intermediate data fiels")
@click.option("--nodes", default=0)
@click.option("--type", default="raw", type=click.Choice(['processed', 'raw']))
@alias("arcs_neutrons2nxs", "%s neutrons2nxs" % cmd_prefix)
@click.pass_context
def neutrons2nxs(ctx, neutrons, nxs, workdir, nodes, type):
    if not neutrons:
        click.echo(ctx.get_help(), color=ctx.color)
        return
    from .applications.Neutrons2Nxs import run
    run(neutrons, nxs, type, workdir, nodes)
    return


# nexus file utilities
@arcs.group()
def nxs():
    "nexus utils"
    return

@nxs.command()
@click.option('--type', default="Ei", type=click.Choice(['Ei', 'monitor']), help='type of metadata')
@click.option('--beam_outdir', help='path to the output directory of arcs beam simulation')
@click.option('--nxs', help='path to the nexus file to be decorated')
@alias("arcs_populate_metadata", "%s nxs populate_metadata" % cmd_prefix)
@click.pass_context
def populate_metadata(ctx, type, beam_outdir, nxs):
    "populate metadata into the simulated nexus file"
    if not nxs or beam_outdir:
        click.echo(ctx.get_help(), color=ctx.color)
        return
    from .applications import nxs
    f = getattr(nxs, "populate_%s_data" % type)
    f(beam_outdir, nxs)
    return

# End of file 
