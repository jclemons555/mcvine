#!/usr/bin/env python

# simple

class arm(object):
  name='arm'
  parameters={}
  extra=' AT (0,0,0) ABSOLUTE\n\n'
  position=((0.0, 0.0, 0.0), 'absolute', None)
  type='Arm'
  orientation=((0, 0, 0), 'absolute', None)

class source(object):
  name='source'
  parameters={'yh': '0.015', 'dist': '1', 'dE': '0.2', 'xw': '0.024', 'radius': '0.015', 'E0': '5'}
  extra='\n AT (0,0,0) RELATIVE arm\n\n'
  position=((0.0, 0.0, 0.0), 'relative', 'arm')
  type='Source_simple'
  orientation=((0, 0, 0), 'relative', 'arm')

class collimator(object):
  name='collimator'
  parameters={'ymax': '0.03', 'divergence': 'coll_div', 'len': '0.2', 'xmax': '0.02', 'xmin': '-0.02', 'ymin': '-0.03'}
  extra='\n  AT (0, 0, 0.4) RELATIVE arm\n\n'
  position=((0.0, 0.0, 0.4), 'relative', 'arm')
  type='Collimator_linear'
  orientation=((0, 0, 0), 'relative', 'arm')

class target(object):
  name='target'
  parameters={'focus_r': '0', 'yheight': '0.015', 'target_z': '1', 'target_x': '0', 'target_y': '0', 'xwidth': '0.02', 'zthick': '0.004', 'pack': '1'}
  extra='\n  AT (0,0,1) RELATIVE arm\n\n'
  position=((0.0, 0.0, 1.0), 'relative', 'arm')
  type='V_sample'
  orientation=((0, 0, 0), 'relative', 'arm')

class arm2(object):
  name='arm2'
  parameters={}
  extra=' \n  AT (0,0,0) RELATIVE target\n  ROTATED (0,ROT,0) relative arm\n\n'
  position=((0.0, 0.0, 0.0), 'relative', 'target')
  type='Arm'
  orientation=((0.0, 'ROT', 0.0), 'relative', 'arm')

class PSD_4pi(object):
  name='PSD_4pi'
  parameters={'nx': '101', 'ny': '51', 'radius': '10', 'filename': '"vanadium.psd"'}
  extra='\n  AT (0,0,0) RELATIVE arm2\n  \nEND\n\n'
  position=((0.0, 0.0, 0.0), 'relative', 'arm2')
  type='PSD_monitor_4PI'
  orientation=((0, 0, 0), 'relative', 'arm2')

def config(ROT=0, coll_div=60.):
  components = [arm, source, collimator, target, arm2, PSD_4pi()]
  from mcvine.pyre_support.pml import set_instrument_parameters, PmlRenderer
  class instrument: pass
  instrument.name=u'simple'
  instrument.components=components
  set_instrument_parameters(instrument, locals())
  from mcvine.pyre_support.pml import PmlRenderer
  renderer = PmlRenderer()
  text = '\n'.join(renderer.render(instrument))
  pml = 'simple.pml'
  open(pml, 'wt').write(text)
  return

from pyre.applications.Script import Script as base
class App(base):
  class Inventory(base.Inventory):
    import pyre.inventory
    ROT = pyre.inventory.float("ROT", default="0")
    coll_div = pyre.inventory.float("coll_div", default="60.")
    pass # Inventory
  def main(self, *args, **kwds):
    d={}
    d["ROT"] = self.inventory.ROT
    d["coll_div"] = self.inventory.coll_div
    config(**d)
    return
  def help(self):
    import sys, os
    h = os.path.basename(sys.argv[0]) + "  "
    print h,
    print "--ROT=0 --coll_div=60."
def main():
  App("config-simple").run()
if __name__=='__main__': main()